plugins {
    id 'java'
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    version = project.mod_version
    group = project.maven_group

    repositories {
        mavenCentral()
        maven {
            url = "https://maven.fabricmc.net/"
        }
        maven {
            url = "https://maven.parchmentmc.org"
        }
    }

    dependencies {
        modImplementation("net.fabricmc:fabric-loader:${rootProject.loader_version}")
    }

//    tasks.processResources {
//        filesMatching("fabric.mod.json") {
//            expand(rootProject.properties)
//        }
//    }
//
//    java {
//        toolchain {
//            languageVersion.set(JavaLanguageVersion.of(21))
//            vendor.set(JvmVendorSpec.AZUL)
//        }
//        withSourcesJar()
//    }
//
//    tasks.withType(JavaCompile).configureEach {
//        options.release.set(21)
//    }
//    tasks.withType(JavaExec).configureEach {
//        javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
//    }
}

subprojects {
    loom {
        runs {
            named("client") {
                client()
                ideConfigGenerated(true)
                runDir("run")
            }
            named("server") {
                server()
                ideConfigGenerated(true)
                runDir("run")
            }
        }
    }

    dependencies {
        implementation(project(":")) {
            exclude(group: "net.fabricmc", module: "fabric-loader")
        }
    }
}

//subprojects.forEach {
//    rootProject.tasks.named("remapJar").configure {
//        dependsOn("${it.path}:remapJar")
//    }
//}

tasks.remapJar.configure { root ->
    subprojects.forEach { subproject ->
        subproject.tasks.matching { it.name == "remapJar" }.configureEach {
            nestedJars.from(root)
        }
    }
}

dependencies {
    minecraft("com.mojang:minecraft:1.21.4")
    mappings(loom.officialMojangMappings())
}

base {
    archivesName = project.archives_base_name
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
